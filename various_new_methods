


#pip install pandas_profiling 
from pandas_profiling import ProfileReport
### To Create the Simple report quickly
df=pd.read_csv("filename")
profile = ProfileReport(df, title='Pandas Profiling Report', explorative=True)
profile.to_widgets()

categorical_col = []
for column in df.columns:
    if df[column].dtype == object and len(df[column].unique()) <= 50:
        categorical_col.append(column)
        print(f"{column} : {df[column].unique()}")
        print("====================================")
        

df.drop('Name', axis =1, inplace=True)
df.drop('Cabin',axis =1, inplace=True)
df.drop('PassengerId', axis =1, inplace=True)
df.drop('Ticket',axis =1, inplace=True)

#one hot encoding
dummies = pd.get_dummies(df[['Female']], drop_first=True)
df = pd.concat([df.drop(['Gender'],axis=1), dummies],axis=1)

dummies1 = pd.get_dummies(df[['Embarked']], drop_first=True)
df = pd.concat([df.drop(['Embarked'],axis=1), dummies1],axis=1)


#  check if the output feature(y) is imbalenced dataset
pd.value_counts(df['Survived'])

# drop a row if missing values are less percentage
df.dropna(subset=['Fare'],how='any',inplace=True)

#how to fill missing values column mean
df['Age'].fillna((df['Age'].mean()), inplace=True)

#pip install pandas_visual-analysis 
from pandas_visual_analysis import VisualAnalysis
VisualAnalysis(df)


Handling categorical values
---------------------------

df1=pd.get_dummies(df['State'],drop_first=True)
df=pd.concat([df1,df],axis=1)
df.drop('State',axis=1,inplace=True)

What is an outlier?
------------------
An outlier is a data point in a data set that is distant from all other observations. A data point that lies outside the overall distribution of the dataset.
-------------

outliers=[]
def detect_outliers(data):
    
    threshold=3
    mean = np.mean(data)
    std =np.std(data)
    
    
    for i in data:
        z_score= (i - mean)/std 
        if np.abs(z_score) > threshold:
            outliers.append(y)
    return outliers
    
outlier_pt=detect_outliers(dataset)
outlier_pt

# skewed distributions
---------------------
for col in df.columns:
    print(col)
    print({df[col].skew()})
    

    
 # Visulazing the distibution of the data for every feature
df.hist(edgecolor='black', linewidth=1.2, figsize=(20, 20));   
    #from pandas_profiling import ProfileReport
    
 # Transform categorical data into dummies
# categorical_col.remove("Attrition")
# data = pd.get_dummies(df, columns=categorical_col)
# data.info()



from sklearn.preprocessing import LabelEncoder

label = LabelEncoder()
for column in categorical_col:
    df[column] = label.fit_transform(df[column])   
    
    # Transform categorical data into dummies
# categorical_col.remove("Attrition")
# data = pd.get_dummies(df, columns=categorical_col)
# data.info()


Codigo	Polaridade	VCE(V)	Ic(A)	Potencia(W)	hfe
0	BC107	NPN	45	0,1	0,3	                    110-450
1	BC108	NPN	20	0,1	0,3	                    110-800
2	BC109	NPN	20	0,1	0,3	                    200-800
3	BC177	PNP	45	0,1	0,3	                    75-260
4	BC178	PNP	25	0,1	0,3	                    125-500


di  = df["hfe"].str.split("-") 
df["hfe_min"] = di.str.get(0) 
df["hfe_max"] = di.str.get(1) 

df["hfe_max"] = df["hfe_max"].str.replace(">","") 

df = tabela.drop(["hfe"], axis=1) 


# let's see how data is distributed for every column
plt.figure(figsize=(20,25), facecolor='white')
plotnumber = 1

for column in data:
    if plotnumber<=16 :
        ax = plt.subplot(4,4,plotnumber)
        sns.distplot(data[column])
        plt.xlabel(column,fontsize=20)
        plt.ylabel('Salary',fontsize=20)
    plotnumber+=1
plt.tight_layout()

#################
